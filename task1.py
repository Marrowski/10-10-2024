#1. Функціональне програмування - парадигма програмування, основа якої складає написання коду за допомогою функцій.
#Характерні риси функціонального програмування:
#1) Розв'язання задачі записується як сукупність незалежних від зовнішнього стану функцій;
#2) Фукнції як об'єкти першого класу;
#3) Незмінність даних;
#4) Використання функцій вищого порядку;
#5) Каррування та часткове застосування функцій.

#2. Лямда-вирази
# Звичайне оголошення функції:
# def my_func(a,b):
#     return a + b

#лямбда-функція:
# num = lambda x,y: x+y

#лямбда-функцію можна назвати "тернарним виразом для функцій".

#3. Карування або Каррінг - перетворення функції від багатьох елементів, на функцію, яка бере свої аргументи по одному.

#4. Декоратори - функція, яка приймає як параметр іншу функцію, або клас, повертає нову, модифіковану функцію, яка її замінює.
#Декоратори позначаються: @ім'я_декоратору.

#5. Функції filter, map, reduce
# 1) map - застосовує функцію для кожного елемента послідовності. Повертає об'єкт-ітератор.

# items = [1, 2, 3, 4, 5]
# squared = list(map(lambda x: x**2, items))

#2) filter - повертає список елементів, для яких задана функція повертає True:

# number_list = range(-5, 5)
# less_than_zero = list(filter(lambda x: x < 0, number_list))
# print(less_than_zero)

# Вивід: [-5, -4, -3, -2, -1]

#3) reduce - обчислення на списку і повернення єдиного результату:

# from functools import reduce
# product = reduce((lambda x, y: x * y), [1, 2, 3, 4])
# Вивід: 24

#6. Модуль functools
#Модуль functools призначений для функцій вищого порядку:
# функцій, які діють або повертають інші функції. Загалом,
# будь-який викликуваний об’єкт можна розглядати як функцію для цілей цього модуля.

#1) #lru-cache. Простими словами надає кеш останніх результатів виконання функцій,
# або іншими словами запам'ятовую є результат їх роботи.

#2) cached_property. Виконує кешування результатів атрибутів класу. Механіка дуже корисна, якщо атрибут, який є незмінним.
#3) total_ordering. Дозволяє швидко реалізовувати оператори порівняння.

#7. Модуль itertools
#Містить інструменти для створення та роботи ітераторів.

#8. Модуль operator.
#Експортує набір ефективних функцій, що відповідають внутрішнім операторам Python.
#1) operator.add(x,y) = x+y;
#2) operator.lt(x,y) = x < y;
#3) operator.eq(x,y) = x == y.
